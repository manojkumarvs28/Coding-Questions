Problem Statement
The objective is to design and implement an in-memory SQL-like database, which should support the following set of operations/functionality:

It should be possible to create or delete tables in a database.
A table definition comprises columns that have types. They can also have constraints
The supported column types are string and int.
The string type can have a maximum length of 20 characters.
The int type can have a minimum value of -1024 and a maximum value of 1024.
Support for mandatory fields (tagging a column as required)
It should be possible to insert records in a table.
It should be possible to print all records in a table.
It should be possible to filter and display records whose column values match a given value.

Note:-
No need to build an SQL parser, you can directly call built functions from an outer layer of code.
Try to build as many points as possible, only after that try building extra functionalities and that too only if time permits.
Try to write clean, modular, and extensible code.


2. Design and develop Comment section (UI +backend)
   Design and develop
   Comment box, Comment button , list comments below the comment box
   Nesting for comments -> Reply Functionality for comment ( Use N - Tree for comments and its child comments)
      Or use some structure like ->  [{
        comment: "",
        author: "",
        children:[{
           ...<An array of comments with same as parent structure>
        }]

      }]
   Edit Comments by providing edit comment on each comment
   Delete a comment and all its child reply comments
   Like a comment

3. ToDo list   
